{"version":3,"sources":["logo.svg","Component/HomeComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HomeComonent","react_default","a","createElement","className","Card","body","InputGroup","FormControl","type","placeholder","Prepend","Text","Table","striped","bordered","hover","varient","Component","App","react_router_dom","Navbar","bg","variant","Brand","href","Toggle","Collapse","fa","Route_default","path","exact","strict","component","HomeComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0PC+DzBC,mLA1DP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAEXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,MAAI,EAACF,UAAU,oBACrBH,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,cACrCT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,aACrCT,EAAAC,EAAAC,cAACI,EAAA,EAAWI,QAAZ,KACIV,EAAAC,EAAAC,cAACI,EAAA,EAAWK,KAAZ,kBAKRX,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,MAAI,EAACF,UAAU,eACjBH,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACZ,UAAU,QACpCH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIc,QAAQ,WACRhB,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,8BAGRF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,mBAEJF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,mBAEJF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,mBAEJF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,qBAjChB,aAfWe,6BC4BZC,mLAjBX,OACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,QAC3BtB,EAAAC,EAAAC,cAACkB,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,iBACAxB,EAAAC,EAAAC,cAACkB,EAAA,EAAOK,OAAR,MACAzB,EAAAC,EAAAC,cAACkB,EAAA,EAAOM,SAAR,CAAiBvB,UAAU,uBACzBH,EAAAC,EAAAC,cAACkB,EAAA,EAAOT,KAAR,KAAaX,EAAAC,EAAAC,cAAA,KAAGsB,KAAK,UAASxB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,UAGlC3B,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CAAO4B,KAAK,IAAIC,OAAK,EAACC,QAAM,EAACC,UAAWC,aAZhChB,aCAEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.184246e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Button, Navbar, NavDropdown, Nav, Form, FormControl, Card, Container, Row, InputGroup, Table } from 'react-bootstrap';\r\n\r\nclass HomeComonent extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid mt-3\">\r\n\r\n                <Card body className=\"card-shadow mb-3\">\r\n                <InputGroup>\r\n                    <FormControl type=\"Date\" placeholder=\"From Date\" />\r\n                    <FormControl type=\"Date\" placeholder=\"To email\" />\r\n                    <InputGroup.Prepend>\r\n                        <InputGroup.Text>Submit</InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n\r\n                </InputGroup>\r\n                </Card>\r\n                <Card body className=\"card-shadow\">\r\n                    <Table striped bordered hover className=\"mb-0\">\r\n                        <thead className=\"blue\" >\r\n                            <tr varient=\"primary\">\r\n                                <th>A/C ID</th>\r\n                                <th>Airline</th>\r\n                                <th>Onboard date</th>\r\n                                <th>Amount charged</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>1</td>\r\n                                <td>Swiss</td>\r\n                                <td>20/03/2019</td>\r\n                                <td>1150</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>2</td>\r\n                                <td>Australia</td>\r\n                                <td>20/03/2019</td>\r\n                                <td>2200</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>3</td>\r\n                                <td>Swiss</td>\r\n                                <td>20/03/2019</td>\r\n                                <td>1150</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>4</td>\r\n                                <td>Australia</td>\r\n                                <td>20/03/2019</td>\r\n                                <td>2200</td>\r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </Table>;\r\n                </Card>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomeComonent","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport Route from 'react-router-dom/Route';\nimport HomeComponent from './Component/HomeComponent';\nimport { Button, Navbar, NavDropdown, Nav, Form, FormControl,Card } from 'react-bootstrap';\nimport { FaGrinWink } from 'react-icons/fa';\n\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar bg=\"primary\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">PO For AERIES</Navbar.Brand>\n            <Navbar.Toggle />\n            <Navbar.Collapse className=\"justify-content-end\">\n              <Navbar.Text><a href=\"#login\"><FaGrinWink/></a></Navbar.Text>\n            </Navbar.Collapse>\n          </Navbar>\n          <Route path=\"/\" exact strict component={HomeComponent}></Route>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}